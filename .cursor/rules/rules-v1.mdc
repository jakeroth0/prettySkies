---
description: 
globs: 
alwaysApply: true
---
Keep files small & focused
– One struct/class per file (plus its accompanying extensions).
– Group related code by feature folder:

Models/ for pure data types

Services/ for API/network logic

ViewModels/ for state + business logic

Views/ for SwiftUI UI code

Clear, consistent naming
– Types: PascalCase (SunsetService, DailyForecast)
– Properties & funcs: camelCase (fetchData, todayCloudMean)
– Prefix async loaders with load / fetch, e.g. loadForecast()

Small, single‐purpose functions
– Break complex logic into helpers: e.g. indexFor(_:in:) for matching hour.
– View body subsections sit in private var fooView: some View { … }.

Heavy in‐line comments
– Every view subsection gets a // MARK: header.
– Complex algorithms get a few lines of explanation right above.

Verbose, prefixed console logging
– Prefix logs with bracketed context:

swift
Copy
Edit
print("[SunsetService] ▶️ Fetching URL:", url)
print("[ContentView] built \(list.count) days")
print("[FavRow] \(location.displayName) localTime → \(localTime)")
– Log both entry and exit of important async tasks.

Guard & early return
– Avoid deep nesting; prefer:

swift
Copy
Edit
guard let coord = location else { return }
Minimal inline styling
– Don’t sprinkle colors or fonts all over; use them once in a reusable component or extension.

Explicit dependency injection
– Inject services into view‐models:

swift
Copy
Edit
init(service: SunsetServiceProtocol = SunsetService.shared) { … }
– Avoid calling singletons directly deep inside views.

Error handling & user feedback
– Catch errors at the top‐level async call, print them, and set a @State var errorMessage for the UI.
– Never swallow errors silently.

Keep formulas visible & simple
– Write the score algorithm in a dedicated helper with doc comments:

swift
Copy
Edit
/// Computes sunset score as average of high/mid/low clouds, clamped 0–100.
func computeSunsetScore(high: Double, mid: Double, low: Double) -> Int { … }
